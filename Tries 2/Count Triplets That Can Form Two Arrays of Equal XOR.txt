class Solution {
public:
    struct TrieNode{
        TrieNode* children[2];     
        int idx_sum;
        int idx_quant;
        
        TrieNode(){
            this->children[0] = nullptr; 
            this->children[1] = nullptr;
            this->idx_sum = 0;
            this->idx_quant = 0;
        }
    };
    
    int countTriplets(vector<int>& arr) {
        
       
        int total_xor = 0;
        int triplets = 0;
        TrieNode* root = new TrieNode();
      
        for (int i = 0; i < arr.size(); i++){
            insert(root, total_xor, i);            
            total_xor ^= arr[i];                          
            triplets += found(root, total_xor, i);        
        }
        return triplets;
    }
    
    void insert(TrieNode* node, int xor_val, int idx){
        for (int i = 31; i >= 0; i--){                    
            int bit = (xor_val >> i) & 1;                 
            if (node->children[bit] == nullptr)           
                node->children[bit] = new TrieNode();
            node = node->children[bit];                 
        }
        
        node->idx_sum += idx;       
        node->idx_quant++;
        return;
    }
    
    int found(TrieNode* node, int xor_val, int idx){
        for (int i = 31; i >= 0; i--){                  
            int bit = (xor_val >> i) & 1;               
            if (node->children[bit] == nullptr)        
                return 0;
            node = node->children[bit];              
        }
        return (node->idx_quant * idx) - node->idx_sum;
    }
};