class DSU {
public:
    vector<int> parent, rank;
    DSU(int N) {
        for (int i = 0; i < N + 5; ++i) {
            parent.push_back(i);
            rank.push_back(1);
        }
    }
    
    int find(int u) {
        if (parent[u] == u) return u;
        return parent[u] = find(parent[u]);
    }
    
    void merge(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX == rootY) return ;
        if (rank[rootX] >= rank[rootY]) {
            parent[rootY] = rootX;
            rank[rootX] += rank[rootY];
        } else {
            parent[rootX] = rootY;
            rank[rootY] += rank[rootX];
        }
    }
    
    bool isConnected(int x, int y) {
        return find(x) == find(y);
    }
};

class Solution {
public:
    vector<bool> friendRequests(int n, vector<vector<int>>& restrictions, vector<vector<int>>& requests) {
        DSU dsu(n);
        vector<bool> res;
        for (const auto &req: requests) {
            int p1 = dsu.find(req[0]);
            int p2 = dsu.find(req[1]);
   
            if(p1 == p2) {
                res.push_back(true);
                continue;
            }
            bool flag = true;
            for(const auto &rest : restrictions) {
                int x1 = dsu.find(rest[0]);
                int x2 = dsu.find(rest[1]);
			
                if(p1 == x1 && p2 == x2 || p1 == x2 && p2 == x1) {
                    flag = false;
                    break;
                } 
            }
            if(flag) {
                dsu.merge(req[0], req[1]);
            }
            res.push_back(flag);
        }
        return res;
    }
};