class TrieNode {
public:
    TrieNode *child[26];
    bool end = false;
    
};
class Trie {
public:
    TrieNode* root ;
    Trie() {
        root = new TrieNode(); 
    }
    
    void insert(string word) {
         TrieNode *node = root;
        for(auto i:word)
        {
            if(node->child[i-'a']==NULL)
            {
                node->child[i-'a'] = new TrieNode();
            }
            node = node->child[i-'a'];
        }
        node->end = true;
    }
    
    bool search(string word) {
        TrieNode *node = root;
        for(auto i:word)
        {
            if(node->child[i-'a']==NULL)
            return false;
            node = node->child[i-'a'];
        }
        if(node->end==true)
        return true;
        else
        return false;
    }
    
    bool startsWith(string prefix) {
         TrieNode *node = root;
        for(auto i:prefix)
        {
            if(node->child[i-'a']==NULL)
            return false;
            node = node->child[i-'a'];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */