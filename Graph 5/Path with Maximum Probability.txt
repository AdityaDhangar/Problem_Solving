class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
          unordered_map<int, vector<pair<int, double>>> graph;
        for (int i = 0; i < edges.size(); ++i) {
            int u = edges[i][0], v = edges[i][1];
            double p = succProb[i];
            graph[u].push_back({v, p});
            graph[v].push_back({u, p});
        }
      
        vector<double> max_prob(n, 0.0);
        priority_queue<pair<double, int>> pq;
        pq.push({1.0, start_node});
        
        while (!pq.empty()) {
            auto [prob, node] = pq.top();
            pq.pop();
            
            if (max_prob[node] >= prob) continue; 
            max_prob[node] = prob;
            
            if (node == end_node) break;
            
            for (const auto& [neighbor, p] : graph[node]) {
                double new_prob = prob * p;
                if (new_prob > max_prob[neighbor]) {
                    pq.push({new_prob, neighbor});
                }
            }
        }
        
        return max_prob[end_node];
        
    }
};