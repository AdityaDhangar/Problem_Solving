class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
         unordered_map<int, vector<pair<int, int>>> graph;
        for (const auto& flight : flights) {
            int u = flight[0], v = flight[1], w = flight[2];
            graph[u].push_back({v, w});
        }
        priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<tuple<int, int, int>>> pq;
        pq.push({0, src, 0});
        while (!pq.empty()) {
            auto [cost, node, stops] = pq.top();
            pq.pop();
            if (node == dst) return cost;
            if (stops > k) continue;
            for (const auto& [neighbor, price] : graph[node]) {
                pq.push({cost + price, neighbor, stops + 1});
            }
        }
        return -1;
    }
};