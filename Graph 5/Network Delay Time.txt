class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
         unordered_map<int, vector<pair<int, int>>> graph;
        for (const auto& time : times) {
            int u = time[0], v = time[1], w = time[2];
            graph[u].push_back({v, w});
        }
        vector<int> distances(n + 1, numeric_limits<int>::max());
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        pq.push({0, k});
        distances[k] = 0;
        
        // Dijkstra's algorithm
        while (!pq.empty()) {
            auto [dist, node] = pq.top();
            pq.pop();
            for (const auto& [neighbor, weight] : graph[node]) {
                int newDist = dist + weight;
                if (newDist < distances[neighbor]) {
                    distances[neighbor] = newDist;
                    pq.push({newDist, neighbor});
                }
            }
        }
        int maxDist = 0;
        for (int i = 1; i <= n; ++i) {
            if (distances[i] == numeric_limits<int>::max()) {
           
                return -1;
            }
            maxDist = max(maxDist, distances[i]);
        }
        
        return maxDist;
    }
};
   