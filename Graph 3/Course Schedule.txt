class Solution {
public:
      bool hasCycle(int node, vector<vector<int>>& graph, vector<bool>& visited, vector<bool>& onStack) {
        if (visited[node])
            return false;
        
        visited[node] = true;
        onStack[node] = true;

        for (int neighbor : graph[node]) {
            if (!visited[neighbor] && hasCycle(neighbor, graph, visited, onStack))
                return true;
            else if (onStack[neighbor])
                return true;
        }

        onStack[node] = false;
        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
         vector<vector<int>> graph(numCourses);
        for (auto& prereq : prerequisites) {
            graph[prereq[1]].push_back(prereq[0]);
        }

        
        vector<bool> visited(numCourses, false);
        vector<bool> onStack(numCourses, false);
        for (int i = 0; i < numCourses; ++i) {
            if (!visited[i] && hasCycle(i, graph, visited, onStack))
                return false;
        }

        return true;
    }
};