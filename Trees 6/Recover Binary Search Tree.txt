/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
    TreeNode *first = nullptr; 
    TreeNode *second = nullptr; 
    TreeNode *prev = nullptr;

    stack<TreeNode*> s;
    TreeNode *current = root;

    
    while (current != nullptr || !s.empty()) {
        while (current != nullptr) {
            s.push(current);
            current = current->left;
        }

        current = s.top();
        s.pop();

     
        if (prev != nullptr && prev->val > current->val) {
            if (first == nullptr) {
                first = prev; 
            }
            second = current;}
        
        prev = current;
        current = current->right;
    }

    
    if (first != nullptr && second != nullptr) {
        swap(first->val, second->val);
    }
}
    void inorderTraversal(TreeNode* root) {
    if (root == nullptr) return;
    inorderTraversal(root->left);
    cout << root->val << " ";
    inorderTraversal(root->right);
}
    
};